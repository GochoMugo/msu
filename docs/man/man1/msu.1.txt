MSU(1)
======
:doctype: manpage


NAME
----
msu - my shell utilities


SYNOPSIS
--------
*msu* require|install|uninstall 'MODULE'...

*msu* execute|install-many|uninstall-many 'PATH'

*msu* run 'MODULE'.'FUNC'

*msu* list ['SCOPE']

*msu* upgrade ['VERSION']

*msu* nuke

*msu* version ['MODULE']

*msu* help


DESCRIPTION
-----------
The msu(1) command adds useful utilities for use in your shell.
*msu* stands for 'My' 'Shell' 'Utilities'.


COMMANDS
--------
*re, require* 'MODULE'...::
    Loads the module 'MODULE' into a new bash environment,
    making the modules' functions and variables available. This
    allows interacting with the low-level library functions directly.
    This environment should 'sourced' into the current environment.

    For example,

    $ . msu require console net
    $ success 'a success message'

*r, run* 'MODULE'.'FUNC'::
    Runs the function 'FUNC' in the module 'MODULE'. Any extra
    arguments are passed to the function as is.

    For example,

    $ msu run console.success 'a success message'

*x, execute* 'PATH'::
    Executes the file at path 'PATH' by simply running the code
    through bash, with the core library loaded before-hand. This
    emulates the action of running a function with its body being
    the contents of the file. This command should be considered
    DANGEROUS as it is able to execute commands in a file without the
    execution bit set.

*i, install* 'MODULE'...::
    Installs the module 'MODULE' into the directory at `${MSU_EXTERNAL_LIB}`.
    The module can be located either locally or remotely. If remote,
    a prefix shorthand is required to determine where to fetch the
    module.

    Available shorthands include:

      gh: - from Github, e.g. 'gh:GochoMugo/transfer'
      bt: - from Bitbucket, e.g. 'bt:GochoMugo/transfer'

    The shorthands are case-insensitive.

*im, install-many* 'PATH'::
    Installs modules listed in a file at path 'PATH'. The list is a
    simple array of module names, delimited with newlines. This is
    useful in bootstrapping new machines.

*u, uninstall* 'MODULE'...::
    Uninstalls the module 'MODULE' by removing its contents from
    `${MSU_EXTERNAL_LIB}`.

*um, uninstall-many* 'PATH'::
    Uninstalls modules listed in a file at path 'PATH'. The list
    is a simple array of module names, delimited with newlines. This
    is useful in un-bootstrapping machines (as a reverse of
    *install-many*).

*ls, list* ['SCOPE']::
    Lists either internal and external modules installed. Passing 'SCOPE'
    as '-i'/'--internal' lists only internal modules while '-e'/'--external'
    lists only external modules.

*up, upgrade* ['VERSION']::
    Upgrades msu to the version 'VERSION', if passed. Otherwise upgrades
    to the latest version.  If 'VERSION' equals 'HEAD', the master branch
    is used directly. This request hits the network to check for new
    versions and execute downloads if necessary.

*nk, nuke*::
    Nukes msu entirely. This involves removing the msu executable, internal
    and external libraries, load strings added to ~/.bashrc and temporary
    installation locations.

*h, help*::
    Shows basic help information, shortened for easier recap.

*v, version* ['MODULE']::
    Shows version information for the module 'MODULE', if passed. Otherwise
    shows version information for msu itself.


ENVIRONMENT VARIABLES
---------------------
*`${MSU_EXTERNAL_LIB}`*::
    Represents the path to the directory holding the external modules.
    It is where modules are installed to, with the 'install' and
    'install-many' commands. It defaults to `${HOME}/.msu`.


ALIASES
-------
On startup, aliases are loaded. Aliases added by msu are prefixed with
'msu'. Remember any alias (including those added by msu itself) can be
overridden. See msu(3) for more details on how aliases work.

One of the most important aliases is *msu.reload*.

*msu.reload*::
    Reloads aliases from internal and external modules. This allows you to
    load new aliases after installing modules.

Other aliases are listed in man(3).


SHEBANG
-------

msu can be used in a shebang line, which in almost all cases would be
'#!/usr/bin/env msu'. The shell script (using the shebang), would receive
the path to itself as `${1}` and have the other arguments follow as normal,
in `${2}`, `${3}`, ... This means that the script can accept command-line
arguments.


CAVEATS
-------
The command *upgrade* uses python behind the covers to upgrade msu(1) to
the latest version automatically (without specifying 'VERSION'). Therefore,
the command python(1) must be available. Also these python packages need
to be installed: requests, semver.

The commands *install*, *install-many* and *upgrade* use git for
cloning repositories and generating module metadata. Therefore, the
command git(1) must be available.



RESOURCES
---------
Source code: https://github.com/GochoMugo/msu

Issue tracker: https://github.com/GochoMugo/msu/issues


AUTHOR
------
*msu* is developed and maintained by Gocho Mugo.


COPYING
-------
THE MIT LICENSE (MIT)

Copyright \(C) 2015-2016 Gocho Mugo <mugo@forfuture.co.ke>
